{"version":3,"sources":["views/guide/steps.js","views/guide/index.jsx","utils/typing.js","components/TypingCard/index.jsx"],"names":["steps","element","popover","title","description","position","driver","Driver","animate","opacity","doneBtnText","closeBtnText","nextBtnText","prevBtnText","guide","defineSteps","start","Guide","className","TypingCard","source","type","onClick","Typing","opts","this","output","delay","chain","parent","dom","val","done","convert","arr","children","Array","from","childNodes","i","length","node","nodeType","concat","nodeValue","split","push","callback","setTimeout","appendChild","document","createTextNode","ele","current","shift","print","play","cloneNode","init","props","sourceEl","useRef","outputEl","useEffect","bordered","style","display","ref","dangerouslySetInnerHTML","__html","defaultProps"],"mappings":"qLAoCeA,EApCD,CACZ,CACEC,QAAS,mBACTC,QAAS,CACPC,MAAO,2BACPC,YAAa,uCACbC,SAAU,WAGd,CACEJ,QAAS,uBACTC,QAAS,CACPC,MAAO,YACPC,YAAa,0DACbC,SAAU,WAGd,CACEJ,QAAS,wBACTC,QAAS,CACPC,MAAO,aACPC,YAAa,eACbC,SAAU,SAGd,CACEJ,QAAS,sBACTC,QAAS,CACPC,MAAO,WACPC,YAAa,2BACbC,SAAU,UCxBVC,EAAS,IAAIC,IAAO,CACxBC,SAAS,EAGTC,QAAS,IACTC,YAAa,eACbC,aAAc,eACdC,YAAa,qBACbC,YAAa,uBAGTC,EAAQ,WACZR,EAAOS,YAAYf,GACnBM,EAAOU,SAeMC,UAbD,WAGZ,OACE,yBAAKC,UAAU,iBACb,kBAACC,EAAA,EAAD,CAAYhB,MAAM,2BAAOiB,OAJZ,wVAKb,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAASR,GAAhC,+B,+ECgDSS,E,WA1Eb,WAAYC,GAAO,oBACjBC,KAAKD,KAAOA,GAAQ,GACpBC,KAAKL,OAASI,EAAKJ,OACnBK,KAAKC,OAASF,EAAKE,OACnBD,KAAKE,MAAQH,EAAKG,OAAS,IAC3BF,KAAKG,MAAQ,CACXC,OAAQ,KACRC,IAAKL,KAAKC,OACVK,IAAK,IAEyB,oBAAnBN,KAAKD,KAAKQ,OAAsBP,KAAKD,KAAKQ,KAAO,c,mDAM9DP,KAAKG,MAAMG,IAAMN,KAAKQ,QAAQR,KAAKL,OAAQK,KAAKG,MAAMG,O,8BAGhDD,EAAKI,GAGX,IADA,IAAIC,EAAWC,MAAMC,KAAKP,EAAIQ,YACrBC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAAK,CACxC,IAAIE,EAAON,EAASI,GACpB,GAAsB,IAAlBE,EAAKC,SACPR,EAAMA,EAAIS,OAAOF,EAAKG,UAAUC,MAAM,UACjC,GAAsB,IAAlBJ,EAAKC,SAAgB,CAC9B,IAAIX,EAAM,GACVA,EAAMN,KAAKQ,QAAQQ,EAAMV,GACzBG,EAAIY,KAAK,CACP,IAAOL,EACP,IAAOV,KAIb,OAAOG,I,4BAGHJ,EAAKC,EAAKgB,GACdC,YAAW,WACTlB,EAAImB,YAAYC,SAASC,eAAepB,IACxCgB,MACCtB,KAAKE,S,2BAGLyB,GAAM,IAAD,OAER,GAAKA,EAAIrB,IAAIS,OAAb,CAKA,IAAIa,EAAUD,EAAIrB,IAAIuB,QACtB,GAAuB,kBAAZD,EACT5B,KAAK8B,MAAMH,EAAItB,IAAKuB,GAAS,WAC3B,EAAKG,KAAKJ,UAEP,CACL,IAAItB,EAAMuB,EAAQvB,IAAI2B,YACtBL,EAAItB,IAAImB,YAAYnB,GACpBL,KAAK+B,KAAK,CACR3B,OAAQuB,EACRtB,MACAC,IAAKsB,EAAQtB,YAfXqB,EAAIvB,OAAQJ,KAAK+B,KAAKJ,EAAIvB,QACzBJ,KAAKD,KAAKQ,S,8BAoBjBP,KAAKiC,OACLjC,KAAK+B,KAAK/B,KAAKG,W,KClEbT,EAAa,SAACwC,GAAW,IACrBxD,EAAkBwD,EAAlBxD,MAAOiB,EAAWuC,EAAXvC,OAETwC,EAAWC,mBACXC,EAAWD,mBAUjB,OARAE,qBAAU,WACO,IAAIxC,EAAO,CACxBH,OAAQwC,EAASP,QACjB3B,OAAQoC,EAAST,QACjB1B,MAAO,KAEFX,UACN,IAED,kBAAC,IAAD,CAAMgD,UAAU,EAAO9C,UAAU,YAAYf,MAAOA,GAClD,yBACE8D,MAAO,CAAEC,QAAS,QAClBC,IAAKP,EACLQ,wBAAyB,CAAEC,OAAQjD,KAErC,yBAAK+C,IAAKL,MAUhB3C,EAAWmD,aAAe,CACxBnE,MAAO,GACPiB,OAAQ,IAGKD","file":"static/js/Guide.4ef20e74.chunk.js","sourcesContent":["const steps = [\r\n  {\r\n    element: '.ant-btn-primary',\r\n    popover: {\r\n      title: '打开引导',\r\n      description: '打开页面引导',\r\n      position: 'bottom'\r\n    }\r\n  },\r\n  {\r\n    element: '.hamburger-container',\r\n    popover: {\r\n      title: 'Hamburger',\r\n      description: '打开/收起左侧导航栏',\r\n      position: 'bottom'\r\n    }\r\n  },\r\n  {\r\n    element: '.fullScreen-container',\r\n    popover: {\r\n      title: 'Screenfull',\r\n      description: '全屏',\r\n      position: 'left'\r\n    }\r\n  },\r\n  {\r\n    element: '.settings-container',\r\n    popover: {\r\n      title: 'Settings',\r\n      description: '系统设置',\r\n      position: 'left'\r\n    }\r\n  },\r\n  \r\n]\r\n\r\nexport default steps\r\n","import React from \"react\";\r\nimport Driver from \"driver.js\"; // import driver.js\r\nimport \"driver.js/dist/driver.min.css\"; // import driver.js css\r\nimport { Button } from \"antd\";\r\nimport TypingCard from '../../components/TypingCard'\r\nimport steps from \"./steps\";\r\nconst driver = new Driver({\r\n  animate: true, // 在更改突出显示的元素时是否设置动画，\r\n                  // 当header的position为fixed时，会覆盖元素，这是driver.js的bug，\r\n                  // 详细内容见https://github.com/kamranahmedse/driver.js/issues/97\r\n  opacity: 0.75, // 背景不透明度（0表示只有弹出窗口，没有覆盖）\r\n  doneBtnText: \"完成\", // 最后一个按钮上的文本\r\n  closeBtnText: \"关闭\", // 此步骤的“关闭”按钮上的文本\r\n  nextBtnText: \"下一步\", // 此步骤的下一步按钮文本\r\n  prevBtnText: \"上一步\", // 此步骤的上一个按钮文本\r\n});\r\n\r\nconst guide = function () {\r\n  driver.defineSteps(steps);\r\n  driver.start();\r\n};\r\nconst Guide = function () {\r\n  const cardContent = `引导页对于一些第一次进入项目的人很有用，你可以简单介绍下项目的功能。\r\n                       本Demo是基于<a href=\"https://github.com/kamranahmedse/driver.js\" target=\"_blank\">driver.js</a>`\r\n  return (\r\n    <div className=\"app-container\">\r\n      <TypingCard title='新手引导' source={cardContent}/>\r\n      <Button type=\"primary\" onClick={guide}>\r\n        打开引导\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Guide;\r\n","class Typing {\r\n  constructor(opts) {\r\n    this.opts = opts || {};\r\n    this.source = opts.source;\r\n    this.output = opts.output;\r\n    this.delay = opts.delay || 120;\r\n    this.chain = {\r\n      parent: null,\r\n      dom: this.output,\r\n      val: []\r\n    };\r\n    if (!(typeof this.opts.done === 'function')) this.opts.done = function () {\r\n    };\r\n  }\r\n\r\n  init() {\r\n    //初始化函数\r\n    this.chain.val = this.convert(this.source, this.chain.val);\r\n  }\r\n\r\n  convert(dom, arr) {\r\n    //将dom节点的子节点转换成数组，\r\n    let children = Array.from(dom.childNodes)\r\n    for (let i = 0; i < children.length; i++) {\r\n      let node = children[i]\r\n      if (node.nodeType === 3) {\r\n        arr = arr.concat(node.nodeValue.split(''))   //将字符串转换成字符串数组，后面打印时才会一个一个的打印\r\n      } else if (node.nodeType === 1) {\r\n        let val = []\r\n        val = this.convert(node, val)\r\n        arr.push({\r\n          'dom': node,\r\n          'val': val\r\n        })\r\n      }\r\n    }\r\n    return arr\r\n  }\r\n\r\n  print(dom, val, callback) {\r\n    setTimeout(function () {\r\n      dom.appendChild(document.createTextNode(val));\r\n      callback();\r\n    }, this.delay);\r\n  }\r\n\r\n  play(ele) {\r\n    //当打印最后一个字符时，动画完毕，执行done\r\n    if (!ele.val.length) {\r\n      if (ele.parent) this.play(ele.parent);\r\n      else this.opts.done();\r\n      return;\r\n    }\r\n    let current = ele.val.shift()  //获取第一个元素，同时删除数组中的第一个元素\r\n    if (typeof current === 'string') {\r\n      this.print(ele.dom, current, () => {\r\n        this.play(ele); //继续打印下一个字符\r\n      })\r\n    } else {\r\n      let dom = current.dom.cloneNode() //克隆节点，不克隆节点的子节点，所以不用加参数true\r\n      ele.dom.appendChild(dom)\r\n      this.play({\r\n        parent: ele,\r\n        dom,\r\n        val: current.val\r\n      })\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.init();\r\n    this.play(this.chain);\r\n  }\r\n}\r\n\r\nexport default Typing","import React, { useRef, useEffect } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Typing from \"../../utils/typing\";\r\n\r\nconst TypingCard = (props) => {\r\n  const { title, source } = props;\r\n\r\n  const sourceEl = useRef();\r\n  const outputEl = useRef();\r\n\r\n  useEffect(() => {\r\n    const typing = new Typing({\r\n      source: sourceEl.current,\r\n      output: outputEl.current,\r\n      delay: 30,\r\n    });\r\n    typing.start();\r\n  }, []);\r\n  return (\r\n    <Card bordered={false} className=\"card-item\" title={title}>\r\n      <div\r\n        style={{ display: \"none\" }}\r\n        ref={sourceEl}\r\n        dangerouslySetInnerHTML={{ __html: source }}\r\n      />\r\n      <div ref={outputEl} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nTypingCard.propTypes = {\r\n  title: PropTypes.string,\r\n  source: PropTypes.string,\r\n};\r\n\r\nTypingCard.defaultProps = {\r\n  title: \"\",\r\n  source: \"\",\r\n};\r\n\r\nexport default TypingCard;\r\n"],"sourceRoot":""}