{"version":3,"sources":["components/RichTextEditor/index.jsx","views/components-demo/richTextEditor.jsx","utils/typing.js","components/TypingCard/index.jsx"],"names":["RichTextEditor","useState","EditorState","createEmpty","editorState","setEditorState","bordered","onEditorStateChange","wrapperClassName","editorClassName","toolbarClassName","localization","locale","gutter","span","title","style","minHeight","draftToHtml","convertToRaw","getCurrentContent","draftToMarkdown","RichTextEditorDemo","className","TypingCard","source","Typing","opts","this","output","delay","chain","parent","dom","val","done","convert","arr","children","Array","from","childNodes","i","length","node","nodeType","concat","nodeValue","split","push","callback","setTimeout","appendChild","document","createTextNode","ele","current","shift","print","play","cloneNode","init","props","sourceEl","useRef","outputEl","useEffect","start","display","ref","dangerouslySetInnerHTML","__html","defaultProps"],"mappings":"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","file":"static/js/RichTextEditor.a85a5af1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Card, Row, Col } from \"antd\";\r\nimport { EditorState, convertToRaw } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport draftToMarkdown from \"draftjs-to-markdown\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"./index.less\";\r\n\r\nconst RichTextEditor = () => {\r\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n  const onEditorStateChange = (editorState) => setEditorState(editorState);\r\n\r\n  return (\r\n    <div>\r\n      <Card bordered={false}>\r\n        <Editor\r\n          editorState={editorState}\r\n          onEditorStateChange={onEditorStateChange}\r\n          wrapperClassName=\"wrapper-class\"\r\n          editorClassName=\"editor-class\"\r\n          toolbarClassName=\"toolbar-class\"\r\n          localization={{ locale: \"zh\" }}\r\n        />\r\n      </Card>\r\n      <br />\r\n      <Row gutter={10}>\r\n        <Col span={12}>\r\n          <Card\r\n            title=\"同步转换HTML\"\r\n            bordered={false}\r\n            style={{ minHeight: 200 }}\r\n          >\r\n            {editorState &&\r\n              draftToHtml(convertToRaw(editorState.getCurrentContent()))}\r\n          </Card>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Card\r\n            title=\"同步转换MarkDown\"\r\n            bordered={false}\r\n            style={{ minHeight: 200 }}\r\n          >\r\n            {editorState &&\r\n              draftToMarkdown(convertToRaw(editorState.getCurrentContent()))}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RichTextEditor;\r\n","import React from \"react\";\r\nimport RichTextEditor from \"../../components/RichTextEditor\";\r\nimport TypingCard from \"../../components/TypingCard\";\r\n\r\nconst RichTextEditorDemo = () => {\r\n  const cardContent = `\r\n    此页面用到的富文本编辑器是<a href=\"https://github.com/jpuri/react-draft-wysiwyg\">react-draft-wysiwyg</a>。\r\n  `\r\n  return (\r\n    <div className=\"app-container\">\r\n      <TypingCard title=\"新手引导\" source={cardContent} />\r\n      <br />\r\n      <RichTextEditor />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RichTextEditorDemo;\r\n","class Typing {\r\n  constructor(opts) {\r\n    this.opts = opts || {};\r\n    this.source = opts.source;\r\n    this.output = opts.output;\r\n    this.delay = opts.delay || 120;\r\n    this.chain = {\r\n      parent: null,\r\n      dom: this.output,\r\n      val: []\r\n    };\r\n    if (!(typeof this.opts.done === 'function')) this.opts.done = function () {\r\n    };\r\n  }\r\n\r\n  init() {\r\n    //初始化函数\r\n    this.chain.val = this.convert(this.source, this.chain.val);\r\n  }\r\n\r\n  convert(dom, arr) {\r\n    //将dom节点的子节点转换成数组，\r\n    let children = Array.from(dom.childNodes)\r\n    for (let i = 0; i < children.length; i++) {\r\n      let node = children[i]\r\n      if (node.nodeType === 3) {\r\n        arr = arr.concat(node.nodeValue.split(''))   //将字符串转换成字符串数组，后面打印时才会一个一个的打印\r\n      } else if (node.nodeType === 1) {\r\n        let val = []\r\n        val = this.convert(node, val)\r\n        arr.push({\r\n          'dom': node,\r\n          'val': val\r\n        })\r\n      }\r\n    }\r\n    return arr\r\n  }\r\n\r\n  print(dom, val, callback) {\r\n    setTimeout(function () {\r\n      dom.appendChild(document.createTextNode(val));\r\n      callback();\r\n    }, this.delay);\r\n  }\r\n\r\n  play(ele) {\r\n    //当打印最后一个字符时，动画完毕，执行done\r\n    if (!ele.val.length) {\r\n      if (ele.parent) this.play(ele.parent);\r\n      else this.opts.done();\r\n      return;\r\n    }\r\n    let current = ele.val.shift()  //获取第一个元素，同时删除数组中的第一个元素\r\n    if (typeof current === 'string') {\r\n      this.print(ele.dom, current, () => {\r\n        this.play(ele); //继续打印下一个字符\r\n      })\r\n    } else {\r\n      let dom = current.dom.cloneNode() //克隆节点，不克隆节点的子节点，所以不用加参数true\r\n      ele.dom.appendChild(dom)\r\n      this.play({\r\n        parent: ele,\r\n        dom,\r\n        val: current.val\r\n      })\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.init();\r\n    this.play(this.chain);\r\n  }\r\n}\r\n\r\nexport default Typing","import React, { useRef, useEffect } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Typing from \"../../utils/typing\";\r\n\r\nconst TypingCard = (props) => {\r\n  const { title, source } = props;\r\n\r\n  const sourceEl = useRef();\r\n  const outputEl = useRef();\r\n\r\n  useEffect(() => {\r\n    const typing = new Typing({\r\n      source: sourceEl.current,\r\n      output: outputEl.current,\r\n      delay: 30,\r\n    });\r\n    typing.start();\r\n  }, []);\r\n  return (\r\n    <Card bordered={false} className=\"card-item\" title={title}>\r\n      <div\r\n        style={{ display: \"none\" }}\r\n        ref={sourceEl}\r\n        dangerouslySetInnerHTML={{ __html: source }}\r\n      />\r\n      <div ref={outputEl} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nTypingCard.propTypes = {\r\n  title: PropTypes.string,\r\n  source: PropTypes.string,\r\n};\r\n\r\nTypingCard.defaultProps = {\r\n  title: \"\",\r\n  source: \"\",\r\n};\r\n\r\nexport default TypingCard;\r\n"],"sourceRoot":""}