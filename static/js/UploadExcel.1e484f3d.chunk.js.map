{"version":3,"sources":["components/UploadExcel/index.jsx","views/excel/uploadExcel/index.jsx"],"names":["Dragger","Upload","getHeaderRow","sheet","C","headers","range","XLSX","utils","decode_range","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","isExcel","file","test","name","UploadExcel","state","loading","excelData","header","results","draggerProps","_this","multiple","accept","onChange","info","status","message","success","error","beforeUpload","fileList","customRequest","readerData","then","onSuccess","rawFile","Promise","resolve","reject","reader","FileReader","onload","data","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","sheet_to_json","generateData","readAsArrayBuffer","setState","props","uploadSuccess","this","className","LeftOutlined","Component","tableData","tableHeader","handleSuccess","bordered","columns","map","item","title","dataIndex","key","width","align","dataSource"],"mappings":"wOAKQA,EAAYC,IAAZD,QAEFE,EAAe,SAACC,GACpB,IAEIC,EAFEC,EAAU,GACVC,EAAQC,IAAKC,MAAMC,aAAaN,EAAM,SAEtCO,EAAIJ,EAAMK,EAAEC,EAElB,IAAKR,EAAIE,EAAMK,EAAEE,EAAGT,GAAKE,EAAMQ,EAAED,IAAKT,EAAG,CAEvC,IAAMW,EAAOZ,EAAMI,IAAKC,MAAMQ,YAAY,CAAEH,EAAGT,EAAGQ,EAAGF,KAEjDO,EAAM,WAAab,EACnBW,GAAQA,EAAKG,IAAGD,EAAMV,IAAKC,MAAMW,YAAYJ,IACjDV,EAAQe,KAAKH,GAEf,OAAOZ,GAEHgB,EAAU,SAACC,GACf,MAAO,oBAAoBC,KAAKD,EAAKE,OA+ExBC,E,4MAzEbC,MAAQ,CACNC,SAAS,EACTC,UAAW,CACTC,OAAQ,KACRC,QAAS,O,EAGbC,aAAe,WACb,IAAIC,EAAK,eACT,MAAO,CACLR,KAAM,OACNS,UAAU,EACVC,OAAQ,cACRC,SAJK,SAIIC,GAAO,IACNC,EAAWD,EAAKd,KAAhBe,OACO,SAAXA,EACFC,IAAQC,QAAR,UAAmBH,EAAKd,KAAKE,KAA7B,0CACoB,UAAXa,GACTC,IAAQE,MAAR,UAAiBJ,EAAKd,KAAKE,KAA3B,2CAGJiB,aAZK,SAYQnB,EAAMoB,GACjB,IAAKrB,EAAQC,GAEX,OADAgB,IAAQE,MAAM,iEACP,GAGXG,cAlBK,SAkBS7B,GACZkB,EAAMY,WAAW9B,EAAEQ,MAAMuB,MAAK,WAC5B/B,EAAEgC,kB,EAKVF,WAAa,SAACG,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACvC,GACf,IAAMwC,EAAOxC,EAAEyC,OAAOC,OAChBC,EAAWlD,IAAKmD,KAAKJ,EAAM,CAAEK,KAAM,UACnCC,EAAiBH,EAASI,WAAW,GACrCC,EAAYL,EAASM,OAAOH,GAC5B/B,EAAS3B,EAAa4D,GACtBhC,EAAUvB,IAAKC,MAAMwD,cAAcF,GACzC,EAAKG,aAAa,CAAEpC,SAAQC,YAC5BmB,KAEFE,EAAOe,kBAAkBnB,O,EAG7BkB,aAAe,YAA0B,IAAvBpC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxB,EAAKqC,SAAS,CACZvC,UAAW,CAAEC,SAAQC,aAEvB,EAAKsC,MAAMC,eAAiB,EAAKD,MAAMC,cAAc,EAAK3C,MAAME,Y,uDAGhE,OACE,6BACE,kBAAC5B,EAAYsE,KAAKvC,eAChB,uBAAGwC,UAAU,wBAEX,kBAACC,EAAA,EAAD,OAEF,uBAAGD,UAAU,mBAAb,mD,GApEgBE,aCvBpBhD,E,4MACJC,MAAQ,CACNgD,UAAW,GACXC,YAAa,I,EAEfC,cAAgB,YAA0B,IAAvB9C,EAAsB,EAAtBA,QAASD,EAAa,EAAbA,OAC1B,EAAKsC,SAAS,CACZO,UAAW5C,EACX6C,YAAa9C,K,uDAIf,OACE,yBAAK0C,UAAU,iBACb,kBAAC,EAAD,CAAsBF,cAAeC,KAAKM,gBAC1C,6BACA,kBAAC,IAAD,CACEC,UAAQ,EACRC,QAASR,KAAK5C,MAAMiD,YAAYI,KAAI,SAACC,GAAD,MAAW,CAC7CC,MAAOD,EACPE,UAAWF,EACXG,IAAKH,EACLI,MAAO,IACPC,MAAO,aAETC,WAAYhB,KAAK5C,MAAMgD,iB,GAzBPD,aAgCXhD,a","file":"static/js/UploadExcel.1e484f3d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Upload, message } from \"antd\";\r\nimport { LeftOutlined} from \"@ant-design/icons\";\r\nimport XLSX from \"xlsx\";\r\nconst { Dragger } = Upload;\r\n\r\nconst getHeaderRow = (sheet) => {\r\n  const headers = [];\r\n  const range = XLSX.utils.decode_range(sheet[\"!ref\"]);\r\n  let C;\r\n  const R = range.s.r;\r\n  /* start in the first row */\r\n  for (C = range.s.c; C <= range.e.c; ++C) {\r\n    /* walk every column in the range */\r\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })];\r\n    /* find the cell in the first row */\r\n    let hdr = \"UNKNOWN \" + C; // <-- replace with your desired default\r\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\r\n    headers.push(hdr);\r\n  }\r\n  return headers;\r\n};\r\nconst isExcel = (file) => {\r\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\r\n};\r\nclass UploadExcel extends Component {\r\n  static propTypes = {\r\n    uploadSuccess: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    loading: false,\r\n    excelData: {\r\n      header: null,\r\n      results: null,\r\n    },\r\n  };\r\n  draggerProps = () => {\r\n    let _this = this;\r\n    return {\r\n      name: \"file\",\r\n      multiple: false,\r\n      accept: \".xlsx, .xls\",\r\n      onChange(info) {\r\n        const { status } = info.file;\r\n        if (status === \"done\") {\r\n          message.success(`${info.file.name} 文件上传成功`);\r\n        } else if (status === \"error\") {\r\n          message.error(`${info.file.name} 文件上传失败`);\r\n        }\r\n      },\r\n      beforeUpload(file, fileList) {\r\n        if (!isExcel(file)) {\r\n          message.error(\"仅支持上传.xlsx, .xls, .csv 文件\");\r\n          return false;\r\n        }\r\n      },\r\n      customRequest(e) {\r\n        _this.readerData(e.file).then(() => {\r\n          e.onSuccess();\r\n        });\r\n      }\r\n    };\r\n  };\r\n  readerData = (rawFile) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const data = e.target.result;\r\n        const workbook = XLSX.read(data, { type: \"array\" });\r\n        const firstSheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[firstSheetName];\r\n        const header = getHeaderRow(worksheet);\r\n        const results = XLSX.utils.sheet_to_json(worksheet);\r\n        this.generateData({ header, results });\r\n        resolve();\r\n      };\r\n      reader.readAsArrayBuffer(rawFile);\r\n    });\r\n  };\r\n  generateData = ({ header, results }) => {\r\n    this.setState({\r\n      excelData: { header, results },\r\n    });\r\n    this.props.uploadSuccess && this.props.uploadSuccess(this.state.excelData);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dragger {...this.draggerProps()}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n            {/* <Icon type=\"inbox\" /> */}\r\n            <LeftOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            Click or drag file to this area to upload\r\n          </p>\r\n        </Dragger>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadExcel;\r\n","import React, { Component } from \"react\";\r\nimport { Table } from \"antd\";\r\nimport UploadExcelComponent from \"../../../components/UploadExcel\";\r\nclass UploadExcel extends Component {\r\n  state = {\r\n    tableData: [],\r\n    tableHeader: [],\r\n  };\r\n  handleSuccess = ({ results, header }) => {\r\n    this.setState({\r\n      tableData: results,\r\n      tableHeader: header,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <UploadExcelComponent uploadSuccess={this.handleSuccess} />\r\n        <br />\r\n        <Table\r\n          bordered\r\n          columns={this.state.tableHeader.map((item) => ({\r\n            title: item,\r\n            dataIndex: item,\r\n            key: item,\r\n            width: 195,\r\n            align: \"center\",\r\n          }))}\r\n          dataSource={this.state.tableData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadExcel;\r\n"],"sourceRoot":""}